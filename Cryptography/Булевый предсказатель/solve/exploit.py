import requests
from Crypto.Util.number import long_to_bytes

BASE_URL = "http://tasks.polyctf.ru:30010"

def get_public_key():
    response = requests.get(f"{BASE_URL}/public_key").json()
    return int(response["n"]), int(response["e"]), int(response["ciphertext"])

def parity_oracle(ciphertext):
    response = requests.get(f"{BASE_URL}/oracle", params={"ciphertext": str(ciphertext)}).json()
    return response.get("even", None)

def parity_oracle_attack(n, e, ciphertext):
    lower_bound = 0
    upper_bound = n
    C = ciphertext

    for i in range(n.bit_length()):
        C = (C * pow(2, e, n)) % n
        is_even = parity_oracle(C)

        if is_even:
            upper_bound = (upper_bound + lower_bound) // 2
        else:
            lower_bound = (upper_bound + lower_bound) // 2

        print(f"iter {i}: M âˆˆ [{lower_bound}, {upper_bound}]")

        if upper_bound - lower_bound <= 1:
            break

    M = lower_bound
    flag = long_to_bytes(M).decode()
    print(f"flag: {flag}")

def solve_task():
    n, e, ciphertext = get_public_key()
    parity_oracle_attack(n, e, ciphertext)

solve_task()
